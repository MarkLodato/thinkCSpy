<?xml version="1.0"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>How to Think Like a Computer Scientist: E. Complete Python Listings</title><link href="stylesheet.css" type="text/css" rel="stylesheet" /></head><body bgcolor="white"><h1 class="title">E. Complete Python Listings</h1><div class="toc"><ol><li><a href="#auto0">Point class</a></li><li><a href="#auto1">Time class</a></li><li><a href="#auto2">Cards, decks and games</a></li><li><a href="#auto3">Linked Lists</a></li><li><a href="#auto4">Stack class</a></li><li><a href="#auto5">Queues and priority queues</a></li><li><a href="#auto6">Trees</a></li><li><a href="#auto7">Expression trees</a></li><li><a href="#auto8">Guess the animal</a></li><li><a href="#auto9">Fraction class</a></li></ol></div><div class="content"><span></span><h2>E.1 Point class<a name="auto0"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Point</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">x</span>=<span class="py-src-number">0</span>, <span class="py-src-parameter">y</span>=<span class="py-src-number">0</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">x</span> = <span class="py-src-variable">x</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span> = <span class="py-src-variable">y</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-string">'('</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">x</span>) + <span class="py-src-string">', '</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">y</span>) + <span class="py-src-string">')'</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__add__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Point</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">x</span> + <span class="py-src-variable">other</span>.<span class="py-src-variable">x</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span> + <span class="py-src-variable">other</span>.<span class="py-src-variable">y</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__sub__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Point</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">x</span> - <span class="py-src-variable">other</span>.<span class="py-src-variable">x</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span> - <span class="py-src-variable">other</span>.<span class="py-src-variable">y</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__mul__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">x</span> * <span class="py-src-variable">other</span>.<span class="py-src-variable">x</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span> * <span class="py-src-variable">other</span>.<span class="py-src-variable">y</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__rmul__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Point</span>(<span class="py-src-variable">other</span> * <span class="py-src-variable">self</span>.<span class="py-src-variable">x</span>, <span class="py-src-variable">other</span> * <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">reverse</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">x</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">y</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">x</span>
 

<span class="py-src-comment"># front_and_back function
</span>
<span class="py-src-keyword">def</span> <span class="py-src-identifier">front_and_back</span>(<span class="py-src-parameter">front</span>):
    <span class="py-src-keyword">from</span> <span class="py-src-variable">copy</span> <span class="py-src-keyword">import</span> <span class="py-src-variable">copy</span>
    <span class="py-src-variable">back</span> = <span class="py-src-variable">copy</span>(<span class="py-src-variable">front</span>)
    <span class="py-src-variable">back</span>.<span class="py-src-variable">reverse</span>()
    <span class="py-src-keyword">print</span> <span class="py-src-variable">str</span>(<span class="py-src-variable">front</span>) + <span class="py-src-variable">str</span>(<span class="py-src-variable">back</span>)
</pre><h2>E.2 Time class<a name="auto1"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Time</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">hours</span>=<span class="py-src-number">0</span>, <span class="py-src-parameter">minutes</span>=<span class="py-src-number">0</span>, <span class="py-src-parameter">seconds</span>=<span class="py-src-number">0</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">hours</span> = <span class="py-src-variable">hours</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span> = <span class="py-src-variable">minutes</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">seconds</span> = <span class="py-src-variable">seconds</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
       <span class="py-src-keyword">return</span> <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">hours</span>) + <span class="py-src-string">&quot;:&quot;</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span>) + <span class="py-src-string">&quot;:&quot;</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">seconds</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">convert_to_seconds</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">minutes</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">hours</span> * <span class="py-src-number">60</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span>
        <span class="py-src-variable">seconds</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span> * <span class="py-src-number">60</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">seconds</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">seconds</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">increment</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">secs</span>):
        <span class="py-src-variable">secs</span> = <span class="py-src-variable">secs</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">seconds</span>
 
        <span class="py-src-variable">self</span>.<span class="py-src-variable">hours</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">hours</span> + <span class="py-src-variable">secs</span>/<span class="py-src-number">3600</span>
        <span class="py-src-variable">secs</span> = <span class="py-src-variable">secs</span> % <span class="py-src-number">3600</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">minutes</span> + <span class="py-src-variable">secs</span>/<span class="py-src-number">60</span>
        <span class="py-src-variable">secs</span> = <span class="py-src-variable">secs</span> % <span class="py-src-number">60</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">seconds</span> = <span class="py-src-variable">secs</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">make_time</span>(<span class="py-src-parameter">secs</span>):
        <span class="py-src-variable">time</span> = <span class="py-src-variable">Time</span>()
        <span class="py-src-variable">time</span>.<span class="py-src-variable">hours</span> = <span class="py-src-variable">secs</span>/<span class="py-src-number">3600</span>
        <span class="py-src-variable">secs</span> = <span class="py-src-variable">secs</span> - <span class="py-src-variable">time</span>.<span class="py-src-variable">hours</span> * <span class="py-src-number">3600</span>
        <span class="py-src-variable">time</span>.<span class="py-src-variable">minutes</span> = <span class="py-src-variable">secs</span>/<span class="py-src-number">60</span>
        <span class="py-src-variable">secs</span> = <span class="py-src-variable">secs</span> - <span class="py-src-variable">time</span>.<span class="py-src-variable">minutes</span> * <span class="py-src-number">60</span>
        <span class="py-src-variable">time</span>.<span class="py-src-variable">seconds</span> = <span class="py-src-variable">secs</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">time</span>
</pre><h2>E.3 Cards, decks and games<a name="auto2"></a></h2><pre class="python">
<span class="py-src-keyword">import</span> <span class="py-src-variable">random</span>
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Card</span>:
    <span class="py-src-variable">suits</span> = [<span class="py-src-string">&quot;Clubs&quot;</span>, <span class="py-src-string">&quot;Diamonds&quot;</span>, <span class="py-src-string">&quot;Hearts&quot;</span>, <span class="py-src-string">&quot;Spades&quot;</span>]
    <span class="py-src-variable">ranks</span> = [<span class="py-src-string">&quot;narf&quot;</span>, <span class="py-src-string">&quot;Ace&quot;</span>, <span class="py-src-string">&quot;2&quot;</span>, <span class="py-src-string">&quot;3&quot;</span>, <span class="py-src-string">&quot;4&quot;</span>, <span class="py-src-string">&quot;5&quot;</span>, <span class="py-src-string">&quot;6&quot;</span>, <span class="py-src-string">&quot;7&quot;</span>, <span class="py-src-string">&quot;8&quot;</span>, <span class="py-src-string">&quot;9&quot;</span>, <span class="py-src-string">&quot;10&quot;</span>,
             <span class="py-src-string">&quot;Jack&quot;</span>, <span class="py-src-string">&quot;Queen&quot;</span>, <span class="py-src-string">&quot;King&quot;</span>]
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">suit</span>=<span class="py-src-number">0</span>, <span class="py-src-parameter">rank</span>=<span class="py-src-number">0</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">suit</span> = <span class="py-src-variable">suit</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">rank</span> = <span class="py-src-variable">rank</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">ranks</span>[<span class="py-src-variable">self</span>.<span class="py-src-variable">rank</span>] + <span class="py-src-string">&quot; of &quot;</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">suits</span>[<span class="py-src-variable">self</span>.<span class="py-src-variable">suit</span>]
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__cmp__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-comment"># check the suits
</span>        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">suit</span> &gt; <span class="py-src-variable">other</span>.<span class="py-src-variable">suit</span>: <span class="py-src-keyword">return</span> <span class="py-src-number">1</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">suit</span> &lt; <span class="py-src-variable">other</span>.<span class="py-src-variable">suit</span>: <span class="py-src-keyword">return</span> -<span class="py-src-number">1</span>
        <span class="py-src-comment"># suits are the same... check ranks
</span>        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">rank</span> &gt; <span class="py-src-variable">other</span>.<span class="py-src-variable">rank</span>: <span class="py-src-keyword">return</span> <span class="py-src-number">1</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">rank</span> &lt; <span class="py-src-variable">other</span>.<span class="py-src-variable">rank</span>: <span class="py-src-keyword">return</span> -<span class="py-src-number">1</span>
        <span class="py-src-comment"># ranks are the same... it's a tie
</span>        <span class="py-src-keyword">return</span> <span class="py-src-number">0</span>
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Deck</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span> = []
        <span class="py-src-keyword">for</span> <span class="py-src-variable">suit</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-number">4</span>):
            <span class="py-src-keyword">for</span> <span class="py-src-variable">rank</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-number">1</span>, <span class="py-src-number">14</span>):
                <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">append</span>(<span class="py-src-variable">Card</span>(<span class="py-src-variable">suit</span>, <span class="py-src-variable">rank</span>))
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">s</span> = <span class="py-src-string">&quot;&quot;</span>
        <span class="py-src-keyword">for</span> <span class="py-src-variable">i</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>)):
            <span class="py-src-variable">s</span> = <span class="py-src-variable">s</span> + <span class="py-src-string">&quot; &quot;</span>*<span class="py-src-variable">i</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[<span class="py-src-variable">i</span>]) + <span class="py-src-string">&quot;\n&quot;</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">s</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">shuffle</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">import</span> <span class="py-src-variable">random</span>
        <span class="py-src-variable">num_cards</span> = <span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>)
        <span class="py-src-keyword">for</span> <span class="py-src-variable">i</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-variable">num_cards</span>):
            <span class="py-src-variable">j</span> = <span class="py-src-variable">random</span>.<span class="py-src-variable">randrange</span>(<span class="py-src-variable">i</span>, <span class="py-src-variable">num_cards</span>)
            [<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[<span class="py-src-variable">i</span>], <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[<span class="py-src-variable">j</span>]] = [<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[<span class="py-src-variable">j</span>], <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[<span class="py-src-variable">i</span>]]
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">card</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">card</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>:
            <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">remove</span>(<span class="py-src-variable">card</span>)
            <span class="py-src-keyword">return</span> <span class="py-src-variable">True</span> 
        <span class="py-src-keyword">else</span>:
            <span class="py-src-keyword">return</span> <span class="py-src-variable">False</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">pop</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">pop</span>()
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">is_empty</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> (<span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>) == <span class="py-src-number">0</span>)
  
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">deal</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">hands</span>, <span class="py-src-parameter">nCards</span>=<span class="py-src-number">999</span>):
        <span class="py-src-variable">num_hands</span> = <span class="py-src-variable">len</span>(<span class="py-src-variable">hands</span>)
        <span class="py-src-keyword">for</span> <span class="py-src-variable">i</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-variable">nCards</span>):
            <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">is_empty</span>(): <span class="py-src-keyword">break</span>    <span class="py-src-comment"># break if out of cards</span>
            <span class="py-src-variable">card</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">pop</span>()       <span class="py-src-comment"># take the top card</span>
            <span class="py-src-variable">hand</span> = <span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span> % <span class="py-src-variable">num_hands</span>]    <span class="py-src-comment"># whose turn is next?</span>
            <span class="py-src-variable">hand</span>.<span class="py-src-variable">add</span>(<span class="py-src-variable">card</span>)          <span class="py-src-comment"># add the card to the hand</span>
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Hand</span>(<span class="py-src-parameter">Deck</span>):
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">name</span>=<span class="py-src-string">&quot;&quot;</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span> = []
        <span class="py-src-variable">self</span>.<span class="py-src-variable">name</span> = <span class="py-src-variable">name</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">add</span>(<span class="py-src-parameter">self</span>,<span class="py-src-parameter">card</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">append</span>(<span class="py-src-variable">card</span>)
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">s</span> = <span class="py-src-string">&quot;Hand &quot;</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">name</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">is_empty</span>():
            <span class="py-src-variable">s</span> = <span class="py-src-variable">s</span> + <span class="py-src-string">&quot; is empty\n&quot;</span>
        <span class="py-src-keyword">else</span>:
            <span class="py-src-variable">s</span> = <span class="py-src-variable">s</span> + <span class="py-src-string">&quot; contains\n&quot;</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">s</span> + <span class="py-src-variable">Deck</span>.<span class="py-src-variable">__str__</span>(<span class="py-src-variable">self</span>)
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">CardGame</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">deck</span> = <span class="py-src-variable">Deck</span>()
        <span class="py-src-variable">self</span>.<span class="py-src-variable">deck</span>.<span class="py-src-variable">shuffle</span>()
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">OldMaidHand</span>(<span class="py-src-parameter">Hand</span>):
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove_matches</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">count</span> = <span class="py-src-number">0</span>
        <span class="py-src-variable">original_cards</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>[:]
        <span class="py-src-keyword">for</span> <span class="py-src-variable">card</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">original_cards</span>:
            <span class="py-src-variable">match</span> = <span class="py-src-variable">Card</span>(<span class="py-src-number">3</span> - <span class="py-src-variable">card</span>.<span class="py-src-variable">suit</span>, <span class="py-src-variable">card</span>.<span class="py-src-variable">rank</span>)
            <span class="py-src-keyword">if</span> <span class="py-src-variable">match</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>:
                <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">remove</span>(<span class="py-src-variable">card</span>)
                <span class="py-src-variable">self</span>.<span class="py-src-variable">cards</span>.<span class="py-src-variable">remove</span>(<span class="py-src-variable">match</span>)
                <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;Hand %s: %s matches %s&quot;</span> % (<span class="py-src-variable">self</span>.<span class="py-src-variable">name</span>,<span class="py-src-variable">card</span>,<span class="py-src-variable">match</span>)
                <span class="py-src-variable">count</span> = <span class="py-src-variable">count</span>+<span class="py-src-number">1</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">count</span>
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">OldMaidGame</span>(<span class="py-src-parameter">CardGame</span>):
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">play</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">names</span>):
        <span class="py-src-comment"># remove Queen of Clubs
</span>        <span class="py-src-variable">self</span>.<span class="py-src-variable">deck</span>.<span class="py-src-variable">remove</span>(<span class="py-src-variable">Card</span>(<span class="py-src-number">0</span>,<span class="py-src-number">12</span>))
   
        <span class="py-src-comment"># make hands base on names passed
</span>        <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span> = []
        <span class="py-src-keyword">for</span> <span class="py-src-variable">name</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">names</span> : <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>.<span class="py-src-variable">append</span>(<span class="py-src-variable">OldMaidHand</span>(<span class="py-src-variable">name</span>))
   
        <span class="py-src-comment"># deal the cards
</span>        <span class="py-src-variable">self</span>.<span class="py-src-variable">deck</span>.<span class="py-src-variable">deal</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;---------- Cards have been dealt&quot;</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">print_hands</span>()
   
        <span class="py-src-comment"># Remove initial matches
</span>        <span class="py-src-variable">matches</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">remove_matches</span>()
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;---------- Matches discarded, play begins&quot;</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">print_hands</span>()
   
        <span class="py-src-comment"># Play until all 50 cards matched
</span>        <span class="py-src-variable">turn</span> = <span class="py-src-number">0</span>
        <span class="py-src-variable">num_hands</span> = <span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>)
        <span class="py-src-keyword">while</span> <span class="py-src-variable">matches</span> &lt; <span class="py-src-number">25</span>:
            <span class="py-src-variable">matches</span> = <span class="py-src-variable">matches</span> + <span class="py-src-variable">self</span>.<span class="py-src-variable">play_one_turn</span>(<span class="py-src-variable">turn</span>)
            <span class="py-src-variable">turn</span> = (<span class="py-src-variable">turn</span> + <span class="py-src-number">1</span>) % <span class="py-src-variable">num_hands</span>
   
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;---------- Game is Over&quot;</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">print_hands</span> ()
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove_matches</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">count</span> = <span class="py-src-number">0</span>
        <span class="py-src-keyword">for</span> <span class="py-src-variable">hand</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>:
            <span class="py-src-variable">count</span> = <span class="py-src-variable">count</span> + <span class="py-src-variable">hand</span>.<span class="py-src-variable">remove_matches</span>()
        <span class="py-src-keyword">return</span> <span class="py-src-variable">count</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">play_one_turn</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">i</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span>].<span class="py-src-variable">is_empty</span>():
            <span class="py-src-keyword">return</span> <span class="py-src-number">0</span>
        <span class="py-src-variable">neighbor</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">find_neighbor</span>(<span class="py-src-variable">i</span>)
        <span class="py-src-variable">picked</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">neighbor</span>].<span class="py-src-variable">pop</span>()
        <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span>].<span class="py-src-variable">add</span>(<span class="py-src-variable">picked</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;Hand&quot;</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span>].<span class="py-src-variable">name</span>, <span class="py-src-string">&quot;picked&quot;</span>, <span class="py-src-variable">picked</span>
        <span class="py-src-variable">count</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span>].<span class="py-src-variable">remove_matches</span>()
        <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">i</span>].<span class="py-src-variable">shuffle</span>()
        <span class="py-src-keyword">return</span> <span class="py-src-variable">count</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">find_neighbor</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">i</span>):
        <span class="py-src-variable">num_hands</span> = <span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>)
        <span class="py-src-keyword">for</span> <span class="py-src-variable">next</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-number">1</span>,<span class="py-src-variable">num_hands</span>):
            <span class="py-src-variable">neighbor</span> = (<span class="py-src-variable">i</span> + <span class="py-src-variable">next</span>) % <span class="py-src-variable">num_hands</span>
            <span class="py-src-keyword">if</span> <span class="py-src-keyword">not</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>[<span class="py-src-variable">neighbor</span>].<span class="py-src-variable">is_empty</span>():
                <span class="py-src-keyword">return</span> <span class="py-src-variable">neighbor</span>
   
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">print_hands</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">for</span> <span class="py-src-variable">hand</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">hands</span>:
            <span class="py-src-keyword">print</span> <span class="py-src-variable">hand</span>


<span class="py-src-keyword">if</span> <span class="py-src-variable">__name__</span> == <span class="py-src-string">'__main__'</span>:
    <span class="py-src-variable">game</span> = <span class="py-src-variable">OldMaidGame</span>()
    <span class="py-src-variable">game</span>.<span class="py-src-variable">play</span>([<span class="py-src-string">&quot;Allen&quot;</span>, <span class="py-src-string">&quot;Jeff&quot;</span>, <span class="py-src-string">&quot;Chris&quot;</span>])
</pre><h2>E.4 Linked Lists<a name="auto3"></a></h2><pre class="python">
<span class="py-src-keyword">def</span> <span class="py-src-identifier">printList</span>(<span class="py-src-parameter">node</span>):
    <span class="py-src-keyword">while</span> <span class="py-src-variable">node</span>:
        <span class="py-src-keyword">print</span> <span class="py-src-variable">node</span>,
        <span class="py-src-variable">node</span> = <span class="py-src-variable">node</span>.<span class="py-src-variable">next</span>
    <span class="py-src-keyword">print</span>
   
<span class="py-src-keyword">def</span> <span class="py-src-identifier">printBackward</span>(<span class="py-src-parameter">list</span>):
    <span class="py-src-keyword">if</span> <span class="py-src-variable">list</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
    <span class="py-src-variable">head</span> = <span class="py-src-variable">list</span>
    <span class="py-src-variable">tail</span> = <span class="py-src-variable">list</span>.<span class="py-src-variable">next</span>
    <span class="py-src-variable">printBackward</span>(<span class="py-src-variable">tail</span>)
    <span class="py-src-keyword">print</span> <span class="py-src-variable">head</span>,
   
<span class="py-src-keyword">def</span> <span class="py-src-identifier">printBackwardNicely</span>(<span class="py-src-parameter">list</span>):
    <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;(&quot;</span>,
    <span class="py-src-keyword">if</span> <span class="py-src-variable">list</span> != <span class="py-src-variable">None</span>:
        <span class="py-src-variable">head</span> = <span class="py-src-variable">list</span>
        <span class="py-src-variable">tail</span> = <span class="py-src-variable">list</span>.<span class="py-src-variable">next</span>
        <span class="py-src-variable">printBackward</span>(<span class="py-src-variable">tail</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-variable">head</span>,
    <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;)&quot;</span>,
   
<span class="py-src-keyword">def</span> <span class="py-src-identifier">removeSecond</span>(<span class="py-src-parameter">list</span>):
    <span class="py-src-keyword">if</span> <span class="py-src-variable">list</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
    <span class="py-src-variable">first</span>  = <span class="py-src-variable">list</span>
    <span class="py-src-variable">second</span> = <span class="py-src-variable">list</span>.<span class="py-src-variable">next</span>
    <span class="py-src-variable">first</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">second</span>.<span class="py-src-variable">next</span>
    <span class="py-src-variable">second</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">None</span>
    <span class="py-src-keyword">return</span> <span class="py-src-variable">second</span>
   
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Node</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">cargo</span>=<span class="py-src-parameter">None</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">cargo</span> = <span class="py-src-variable">cargo</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">next</span>  = <span class="py-src-variable">None</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cargo</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printBackward</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">next</span> != <span class="py-src-variable">None</span>:
        <span class="py-src-variable">tail</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">next</span>
        <span class="py-src-variable">tail</span>.<span class="py-src-variable">printBackward</span>()
        <span class="py-src-keyword">print</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">cargo</span>,
 
<span class="py-src-keyword">class</span> <span class="py-src-identifier">LinkedList</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-number">0</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>   = <span class="py-src-variable">None</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printBackward</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;(&quot;</span>,
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> != <span class="py-src-variable">None</span>:
            <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>.<span class="py-src-variable">printBackward</span>()
        <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;)&quot;</span>,
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">addFirst</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">cargo</span>):
        <span class="py-src-variable">node</span> = <span class="py-src-variable">Node</span>(<span class="py-src-variable">cargo</span>)
        <span class="py-src-variable">node</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> = <span class="py-src-variable">node</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> + <span class="py-src-number">1</span>
</pre><h2>E.5 Stack class<a name="auto4"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Stack</span>:              <span class="py-src-comment"># Python list implementation</span>
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span> = []
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">push</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">item</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>.<span class="py-src-variable">append</span>(<span class="py-src-variable">item</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">pop</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>.<span class="py-src-variable">pop</span>()
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">isEmpty</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">items</span> == [])
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">evalPostfix</span>(<span class="py-src-parameter">expr</span>):
        <span class="py-src-keyword">import</span> <span class="py-src-variable">re</span>
        <span class="py-src-variable">expr</span> = <span class="py-src-variable">re</span>.<span class="py-src-variable">split</span>(<span class="py-src-string">&quot;([^0-9])&quot;</span>, <span class="py-src-variable">expr</span>)
        <span class="py-src-variable">stack</span> = <span class="py-src-variable">Stack</span>()
        <span class="py-src-keyword">for</span> <span class="py-src-variable">token</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">expr</span>:
        <span class="py-src-keyword">if</span>  <span class="py-src-variable">token</span> == <span class="py-src-string">''</span> <span class="py-src-keyword">or</span> <span class="py-src-variable">token</span> == <span class="py-src-string">' '</span>:
            <span class="py-src-keyword">continue</span>
        <span class="py-src-keyword">if</span>  <span class="py-src-variable">token</span> == <span class="py-src-string">'+'</span>:
            <span class="py-src-variable">sum</span> = <span class="py-src-variable">stack</span>.<span class="py-src-variable">pop</span>() + <span class="py-src-variable">stack</span>.<span class="py-src-variable">pop</span>()
            <span class="py-src-variable">stack</span>.<span class="py-src-variable">push</span>(<span class="py-src-variable">sum</span>)
        <span class="py-src-keyword">elif</span> <span class="py-src-variable">token</span> == <span class="py-src-string">'*'</span>:
            <span class="py-src-variable">product</span> = <span class="py-src-variable">stack</span>.<span class="py-src-variable">pop</span>() * <span class="py-src-variable">stack</span>.<span class="py-src-variable">pop</span>()
            <span class="py-src-variable">stack</span>.<span class="py-src-variable">push</span>(<span class="py-src-variable">product</span>)
        <span class="py-src-keyword">else</span>:
            <span class="py-src-variable">stack</span>.<span class="py-src-variable">push</span>(<span class="py-src-variable">int</span>(<span class="py-src-variable">token</span>))
        <span class="py-src-keyword">return</span> <span class="py-src-variable">stack</span>.<span class="py-src-variable">pop</span>()
</pre><h2>E.6 Queues and priority queues<a name="auto5"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Queue</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-number">0</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>   = <span class="py-src-variable">None</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">empty</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> (<span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> == <span class="py-src-number">0</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">insert</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">cargo</span>):
        <span class="py-src-variable">node</span> = <span class="py-src-variable">Node</span>(<span class="py-src-variable">cargo</span>)
        <span class="py-src-variable">node</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">None</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> == <span class="py-src-variable">None</span>:
            <span class="py-src-comment"># If list is empty our new node is first
</span>            <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> = <span class="py-src-variable">node</span>
        <span class="py-src-keyword">else</span>:
            <span class="py-src-comment"># Find the last node in the list
</span>            <span class="py-src-variable">last</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>
            <span class="py-src-keyword">while</span> <span class="py-src-variable">last</span>.<span class="py-src-variable">next</span>: <span class="py-src-variable">last</span> = <span class="py-src-variable">last</span>.<span class="py-src-variable">next</span>
        <span class="py-src-comment"># Append our new node
</span>        <span class="py-src-variable">last</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">node</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> + <span class="py-src-number">1</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">cargo</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>.<span class="py-src-variable">cargo</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>.<span class="py-src-variable">next</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> - <span class="py-src-number">1</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">cargo</span>
 
<span class="py-src-keyword">class</span> <span class="py-src-identifier">ImprovedQueue</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-number">0</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>   = <span class="py-src-variable">None</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">last</span>   = <span class="py-src-variable">None</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">empty</span>(<span class="py-src-parameter">self</span>) :
        <span class="py-src-keyword">return</span> (<span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> == <span class="py-src-number">0</span>)

    <span class="py-src-keyword">def</span> <span class="py-src-identifier">insert</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">cargo</span>):
        <span class="py-src-variable">node</span> = <span class="py-src-variable">Node</span>(<span class="py-src-variable">cargo</span>)
        <span class="py-src-variable">node</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">None</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> == <span class="py-src-number">0</span>:
            <span class="py-src-comment"># If list is empty our new node is first
</span>            <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">last</span> = <span class="py-src-variable">node</span>
        <span class="py-src-keyword">else</span>:
            <span class="py-src-comment"># Find the last node in the list
</span>            <span class="py-src-variable">last</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">last</span>
        <span class="py-src-comment"># Append our new node
</span>        <span class="py-src-variable">last</span>.<span class="py-src-variable">next</span> = <span class="py-src-variable">node</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">last</span> = <span class="py-src-variable">node</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> + <span class="py-src-number">1</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">cargo</span>       = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>.<span class="py-src-variable">cargo</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>   = <span class="py-src-variable">self</span>.<span class="py-src-variable">head</span>.<span class="py-src-variable">next</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> - <span class="py-src-number">1</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">length</span> == <span class="py-src-number">0</span>: <span class="py-src-variable">self</span>.<span class="py-src-variable">last</span> = <span class="py-src-variable">None</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">cargo</span>
 
<span class="py-src-keyword">class</span> <span class="py-src-identifier">PriorityQueue</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span> = []
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">empty</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span> == []
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">insert</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">item</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>.<span class="py-src-variable">append</span>(<span class="py-src-variable">item</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">remove</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-variable">maxi</span> = <span class="py-src-number">0</span>
        <span class="py-src-keyword">for</span> <span class="py-src-variable">i</span> <span class="py-src-keyword">in</span> <span class="py-src-variable">range</span>(<span class="py-src-number">1</span>,<span class="py-src-variable">len</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>)):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>[<span class="py-src-variable">i</span>] &gt; <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>[<span class="py-src-variable">maxi</span>]:
            <span class="py-src-variable">maxi</span> = <span class="py-src-variable">i</span>
            <span class="py-src-variable">item</span> = <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>[<span class="py-src-variable">maxi</span>]
            <span class="py-src-variable">self</span>.<span class="py-src-variable">items</span>[<span class="py-src-variable">maxi</span>:<span class="py-src-variable">maxi</span>+<span class="py-src-number">1</span>] = []
        <span class="py-src-keyword">return</span> <span class="py-src-variable">item</span>

<span class="py-src-keyword">class</span> <span class="py-src-identifier">Golfer</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">name</span>, <span class="py-src-parameter">score</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">name</span> = <span class="py-src-variable">name</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">score</span>= <span class="py-src-variable">score</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-string">&quot;%-15s: %d&quot;</span> % (<span class="py-src-variable">self</span>.<span class="py-src-variable">name</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">score</span>)

    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__cmp__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">other</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">score</span> &lt; <span class="py-src-variable">other</span>.<span class="py-src-variable">score</span> : <span class="py-src-keyword">return</span>  <span class="py-src-number">1</span>   <span class="py-src-comment"># less is more</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">score</span> &gt; <span class="py-src-variable">other</span>.<span class="py-src-variable">score</span> : <span class="py-src-keyword">return</span> -<span class="py-src-number">1</span>
        <span class="py-src-keyword">return</span> <span class="py-src-number">0</span>
</pre><h2>E.7 Trees<a name="auto6"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Tree</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">cargo</span>, <span class="py-src-parameter">left</span>=<span class="py-src-parameter">None</span>, <span class="py-src-parameter">right</span>=<span class="py-src-parameter">None</span>):
        <span class="py-src-variable">self</span>.<span class="py-src-variable">cargo</span> = <span class="py-src-variable">cargo</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">left</span>  = <span class="py-src-variable">left</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">right</span> = <span class="py-src-variable">right</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">str</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">cargo</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">total</span>(<span class="py-src-parameter">tree</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">tree</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span> <span class="py-src-number">0</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">total</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>) + <span class="py-src-variable">total</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>) + <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printTree</span>(<span class="py-src-parameter">tree</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">tree</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
        <span class="py-src-keyword">print</span> <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>,
        <span class="py-src-variable">printTree</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>)
        <span class="py-src-variable">printTree</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printTreePostorder</span>(<span class="py-src-parameter">tree</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">tree</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
        <span class="py-src-variable">printTreePostorder</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>)
        <span class="py-src-variable">printTreePostorder</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>,
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printTreeInorder</span>(<span class="py-src-parameter">tree</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">tree</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
        <span class="py-src-variable">printTreeInorder</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>,
        <span class="py-src-variable">printTreeInorder</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">printTreeIndented</span>(<span class="py-src-parameter">tree</span>, <span class="py-src-parameter">level</span>=<span class="py-src-number">0</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">tree</span> == <span class="py-src-variable">None</span>: <span class="py-src-keyword">return</span>
        <span class="py-src-variable">printTreeIndented</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>, <span class="py-src-variable">level</span>+<span class="py-src-number">1</span>)
        <span class="py-src-keyword">print</span> <span class="py-src-string">'  '</span>*<span class="py-src-variable">level</span> + <span class="py-src-variable">str</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>)
        <span class="py-src-variable">printTreeIndented</span>(<span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>, <span class="py-src-variable">level</span>+<span class="py-src-number">1</span>)
</pre><h2>E.8 Expression trees<a name="auto7"></a></h2><pre class="python">
<span class="py-src-keyword">def</span> <span class="py-src-identifier">getToken</span>(<span class="py-src-parameter">tokenList</span>, <span class="py-src-parameter">expected</span>):
    <span class="py-src-keyword">if</span> <span class="py-src-variable">tokenList</span>[<span class="py-src-number">0</span>] == <span class="py-src-variable">expected</span>:
        <span class="py-src-variable">tokenList</span>[<span class="py-src-number">0</span>:<span class="py-src-number">1</span>] = []   <span class="py-src-comment"># remove the token</span>
        <span class="py-src-keyword">return</span> <span class="py-src-number">1</span>
    <span class="py-src-keyword">else</span>:
        <span class="py-src-keyword">return</span> <span class="py-src-number">0</span>
 
<span class="py-src-keyword">def</span> <span class="py-src-identifier">getProduct</span>(<span class="py-src-parameter">tokenList</span>):
    <span class="py-src-variable">a</span> = <span class="py-src-variable">getNumber</span>(<span class="py-src-variable">tokenList</span>)
    <span class="py-src-keyword">if</span> <span class="py-src-variable">getToken</span>(<span class="py-src-variable">tokenList</span>, <span class="py-src-string">'*'</span>):
        <span class="py-src-variable">b</span> = <span class="py-src-variable">getProduct</span>(<span class="py-src-variable">tokenList</span>)
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Tree</span>(<span class="py-src-string">'*'</span>, <span class="py-src-variable">a</span>, <span class="py-src-variable">b</span>)
    <span class="py-src-keyword">else</span>:
        <span class="py-src-keyword">return</span> <span class="py-src-variable">a</span>
 
<span class="py-src-keyword">def</span> <span class="py-src-identifier">getSum</span>(<span class="py-src-parameter">tokenList</span>) :
    <span class="py-src-variable">a</span> = <span class="py-src-variable">getProduct</span>(<span class="py-src-variable">tokenList</span>)
    <span class="py-src-keyword">if</span> <span class="py-src-variable">getToken</span>(<span class="py-src-variable">tokenList</span>, <span class="py-src-string">'+'</span>):
        <span class="py-src-variable">b</span> = <span class="py-src-variable">getSum</span>(<span class="py-src-variable">tokenList</span>)
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Tree</span>(<span class="py-src-string">'+'</span>, <span class="py-src-variable">a</span>, <span class="py-src-variable">b</span>)
    <span class="py-src-keyword">else</span>:
        <span class="py-src-keyword">return</span> <span class="py-src-variable">a</span>
 
<span class="py-src-keyword">def</span> <span class="py-src-identifier">getNumber</span>(<span class="py-src-parameter">tokenList</span>):
    <span class="py-src-keyword">if</span> <span class="py-src-variable">getToken</span>(<span class="py-src-variable">tokenList</span>, <span class="py-src-string">'('</span>):
        <span class="py-src-variable">x</span> = <span class="py-src-variable">getSum</span>(<span class="py-src-variable">tokenList</span>)       <span class="py-src-comment"># get subexpression</span>
        <span class="py-src-variable">getToken</span>(<span class="py-src-variable">tokenList</span>, <span class="py-src-string">')'</span>)    <span class="py-src-comment"># eat the closing parenthesis</span>
        <span class="py-src-keyword">return</span> <span class="py-src-variable">x</span>
    <span class="py-src-keyword">else</span>:
        <span class="py-src-variable">x</span> = <span class="py-src-variable">tokenList</span>[<span class="py-src-number">0</span>]
        <span class="py-src-keyword">if</span> <span class="py-src-variable">type</span>(<span class="py-src-variable">x</span>) != <span class="py-src-variable">type</span>(<span class="py-src-number">0</span>): <span class="py-src-keyword">return</span> <span class="py-src-variable">None</span>
        <span class="py-src-variable">tokenList</span>[<span class="py-src-number">0</span>:<span class="py-src-number">1</span>] = []     <span class="py-src-comment"># remove the token</span>
    <span class="py-src-keyword">return</span> <span class="py-src-variable">Tree</span>(<span class="py-src-variable">x</span>, <span class="py-src-variable">None</span>, <span class="py-src-variable">None</span>)  <span class="py-src-comment"># return a leaf with the number</span>
</pre><h2>E.9 Guess the animal<a name="auto8"></a></h2><pre class="python">
<span class="py-src-keyword">def</span> <span class="py-src-identifier">yes</span>(<span class="py-src-parameter">ques</span>):
    <span class="py-src-variable">ans</span> = <span class="py-src-variable">raw_input</span>(<span class="py-src-variable">ques</span>).<span class="py-src-variable">lower</span>()
    <span class="py-src-keyword">return</span> <span class="py-src-variable">ans</span>[<span class="py-src-number">0</span>] == <span class="py-src-string">'y'</span>

<span class="py-src-keyword">def</span> <span class="py-src-identifier">animal</span>():
    <span class="py-src-comment"># start with a singleton
</span>    <span class="py-src-variable">root</span> = <span class="py-src-variable">Tree</span>(<span class="py-src-string">&quot;bird&quot;</span>)

    <span class="py-src-comment"># loop until the user quits
</span>    <span class="py-src-keyword">while</span> <span class="py-src-variable">True</span>:
        <span class="py-src-keyword">print</span>
        <span class="py-src-keyword">if</span> <span class="py-src-keyword">not</span> <span class="py-src-variable">yes</span>(<span class="py-src-string">&quot;Are you thinking of an animal? &quot;</span>): <span class="py-src-keyword">break</span>

        <span class="py-src-comment"># walk the tree
</span>        <span class="py-src-variable">tree</span> = <span class="py-src-variable">root</span>
        <span class="py-src-keyword">while</span> <span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span> != <span class="py-src-variable">None</span>:
            <span class="py-src-variable">prompt</span> = <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span> + <span class="py-src-string">&quot;? &quot;</span>
            <span class="py-src-keyword">if</span> <span class="py-src-variable">yes</span>(<span class="py-src-variable">prompt</span>):
                <span class="py-src-variable">tree</span> = <span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span>
            <span class="py-src-keyword">else</span>:
                <span class="py-src-variable">tree</span> = <span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span>

        <span class="py-src-comment"># make a guess
</span>        <span class="py-src-variable">guess</span> = <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span>
        <span class="py-src-variable">prompt</span> = <span class="py-src-string">&quot;Is it a &quot;</span> + <span class="py-src-variable">guess</span> + <span class="py-src-string">&quot;? &quot;</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">yes</span>(<span class="py-src-variable">prompt</span>):
            <span class="py-src-keyword">print</span> <span class="py-src-string">&quot;I rule!&quot;</span>
            <span class="py-src-keyword">continue</span>

        <span class="py-src-comment"># get new information
</span>        <span class="py-src-variable">prompt</span>  = <span class="py-src-string">&quot;What is the animal's name? &quot;</span>
        <span class="py-src-variable">animal</span>  = <span class="py-src-variable">raw_input</span>(<span class="py-src-variable">prompt</span>)
        <span class="py-src-variable">prompt</span>  = <span class="py-src-string">&quot;What question would distinguish a %s from a %s? &quot;</span>
        <span class="py-src-variable">question</span> = <span class="py-src-variable">raw_input</span>(<span class="py-src-variable">prompt</span> % (<span class="py-src-variable">animal</span>, <span class="py-src-variable">guess</span>))

        <span class="py-src-comment"># add new information to the tree
</span>        <span class="py-src-variable">tree</span>.<span class="py-src-variable">cargo</span> = <span class="py-src-variable">question</span>
        <span class="py-src-variable">prompt</span> = <span class="py-src-string">&quot;If the animal were %s the answer would be? &quot;</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">yes</span>(<span class="py-src-variable">prompt</span> % <span class="py-src-variable">animal</span>):
            <span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span> = <span class="py-src-variable">Tree</span>(<span class="py-src-variable">guess</span>)
            <span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span> = <span class="py-src-variable">Tree</span>(<span class="py-src-variable">animal</span>)
        <span class="py-src-keyword">else</span>:
            <span class="py-src-variable">tree</span>.<span class="py-src-variable">left</span> = <span class="py-src-variable">Tree</span>(<span class="py-src-variable">animal</span>)
            <span class="py-src-variable">tree</span>.<span class="py-src-variable">right</span> = <span class="py-src-variable">Tree</span>(<span class="py-src-variable">guess</span>)
</pre><h2>E.10 <code>Fraction</code> class<a name="auto9"></a></h2><pre class="python">
<span class="py-src-keyword">class</span> <span class="py-src-identifier">Fraction</span>:
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__init__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">numerator</span>, <span class="py-src-parameter">denominator</span>=<span class="py-src-number">1</span>):
        <span class="py-src-variable">g</span> = <span class="py-src-variable">gcd</span>(<span class="py-src-variable">numerator</span>, <span class="py-src-variable">denominator</span>)
        <span class="py-src-variable">self</span>.<span class="py-src-variable">numerator</span>   = <span class="py-src-variable">numerator</span>   / <span class="py-src-variable">g</span>
        <span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span> = <span class="py-src-variable">denominator</span> / <span class="py-src-variable">g</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__mul__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">object</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">type</span>(<span class="py-src-variable">object</span>) == <span class="py-src-variable">type</span>(<span class="py-src-number">5</span>):
            <span class="py-src-variable">object</span> = <span class="py-src-variable">Fraction</span>(<span class="py-src-variable">object</span>)
            <span class="py-src-keyword">return</span> <span class="py-src-variable">Fraction</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">numerator</span>*<span class="py-src-variable">object</span>.<span class="py-src-variable">numerator</span>,
                            <span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span>*<span class="py-src-variable">object</span>.<span class="py-src-variable">denominator</span>)
 
    <span class="py-src-variable">__rmul__</span> = <span class="py-src-variable">__mul__</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__add__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">object</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">type</span>(<span class="py-src-variable">object</span>) == <span class="py-src-variable">type</span>(<span class="py-src-number">5</span>):
            <span class="py-src-variable">object</span> = <span class="py-src-variable">Fraction</span>(<span class="py-src-variable">object</span>)
 
        <span class="py-src-keyword">return</span> <span class="py-src-variable">Fraction</span>(<span class="py-src-variable">self</span>.<span class="py-src-variable">numerator</span>*<span class="py-src-variable">object</span>.<span class="py-src-variable">denominator</span> +
                        <span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span>*<span class="py-src-variable">object</span>.<span class="py-src-variable">numerator</span>,
                        <span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span> * <span class="py-src-variable">object</span>.<span class="py-src-variable">denominator</span>)
 
    <span class="py-src-variable">__radd__</span> = <span class="py-src-variable">__add__</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__cmp__</span>(<span class="py-src-parameter">self</span>, <span class="py-src-parameter">object</span>):
        <span class="py-src-keyword">if</span> <span class="py-src-variable">type</span>(<span class="py-src-variable">object</span>) == <span class="py-src-variable">type</span>(<span class="py-src-number">5</span>):
            <span class="py-src-variable">object</span> = <span class="py-src-variable">Fraction</span>(<span class="py-src-variable">object</span>)
 
        <span class="py-src-variable">diff</span> = (<span class="py-src-variable">self</span>.<span class="py-src-variable">numerator</span>*<span class="py-src-variable">object</span>.<span class="py-src-variable">denominator</span> -
                <span class="py-src-variable">object</span>.<span class="py-src-variable">numerator</span>*<span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span>)
        <span class="py-src-keyword">return</span> <span class="py-src-variable">diff</span>
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__repr__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-variable">self</span>.<span class="py-src-variable">__str__</span>()
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">__str__</span>(<span class="py-src-parameter">self</span>):
        <span class="py-src-keyword">return</span> <span class="py-src-string">&quot;%d/%d&quot;</span> % (<span class="py-src-variable">self</span>.<span class="py-src-variable">numerator</span>, <span class="py-src-variable">self</span>.<span class="py-src-variable">denominator</span>)
 
    <span class="py-src-keyword">def</span> <span class="py-src-identifier">gcd</span>(<span class="py-src-parameter">m</span>,<span class="py-src-parameter">n</span>):
        <span class="py-src-string">&quot;return the greatest common divisor of 2 integer arguments&quot;</span>
        <span class="py-src-keyword">if</span> <span class="py-src-variable">m</span> % <span class="py-src-variable">n</span> == <span class="py-src-number">0</span>:
            <span class="py-src-keyword">return</span> <span class="py-src-variable">n</span>
        <span class="py-src-keyword">else</span>:
            <span class="py-src-keyword">return</span> <span class="py-src-variable">gcd</span>(<span class="py-src-variable">n</span>,<span class="py-src-variable">m</span>%<span class="py-src-variable">n</span>)
</pre></div><p><a href="index.xhtml">Table of Contents</a> |
    <a href="dex.xhtml">Index</a></p></body></html>