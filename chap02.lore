<html>
<head>
  <title>Variables, expressions and statements</title>
</head>

<body>
<h1>Variables, expressions and statements</h1>

<h2>Values and types</h2>
<span class="index" value="value" />
<span class="index" value="type" />
<span class="index" value="string" />
<span class="index" value="integer" />

<p>A <b>value</b> is one of the fundamental things---like a letter or 
a number---that a program manipulates.  The values we have seen so far are
<code>2</code> (the result when we added <code>1 + 1</code>), and
<code>"Hello, World!"</code>.</p>

<p>These values belong to different <b>types</b>: <code>2</code> is
an <b>integer</b>, and <code>"Hello, World!"</code> is a
<b>string</b>, so-called because it contains a <q>string</q> of
letters.  You (and the interpreter) can identify strings because they are
enclosed in quotation marks.</p>

<p>The print statement also works for integers.</p>

<pre class="python-interpreter">
>>> print 4
4
</pre>

<p>If you are not sure what type a value has, the interpreter can tell you.</p>

<pre class="python-interpreter">
>>> type("Hello, World!")
&lt;type 'str'>
>>> type(17)
&lt;type 'int'>
</pre>

<p>Not surprisingly, strings belong to the type <code>str</code> and
integers belong to the type <code>int</code>.  Less obviously, numbers
with a decimal point belong to a type called <code>float</code>, because these
numbers are represented in a format called <b>floating-point</b>.
</p>

<span class="index" value="type" />
<span class="index" value="string" />
<span class="index" value="type!string" />
<span class="index" value="int" />
<span class="index" value="type!int" />
<span class="index" value="float" />
<span class="index" value="type!float" />

<pre class="python-interpreter">
>>> type(3.2)
&lt;type 'float'>
</pre>

<p>What about values like <code>"17"</code> and <code>"3.2"</code>?  They look
like numbers, but they are in quotation marks like strings.</p>

<pre class="python-interpreter">
>>> type("17")
&lt;type 'str'>
>>> type("3.2")
&lt;type 'str'>
</pre>

<p>They're strings.</p>

<p>When you type a large integer, you might be tempted to use commas between
groups of three digits, as in <code>1,000,000</code>.  This is not a legal
integer in Python, but it is legal:</p>

<pre class="python-interpreter">
>>> print 1,000,000
1 0 0
</pre>

<p>Well, that's not what we expected at all!  Python interprets
<code>1,000,000</code> as a list of three items to be printed.  So remember not 
to put commas in your integers.</p>


<h2>Variables</h2>
<span class="index" value="variable" />
<span class="index" value="assignment" />
<span class="index" value="statement!assignment" />

<p>One of the most powerful features of a programming language is the ability
to manipulate <b>variables</b>.  A variable is a name that refers to
a value.</p>

<p>The <b>assignment statement</b> creates new variables and gives
them values:</p>

<pre class="python-interpreter">
>>> message = "What's up, Doc?"
>>> n = 17
>>> pi = 3.14159
</pre>

<p>This example makes three assignments.  The first assigns the string
<code>"What's up, Doc?"</code> to a new variable named <code>message</code>.
The second gives the integer <code>17</code> to <code>n</code>, and the third
gives the floating-point number <code>3.14159</code> to <code>pi</code>.</p>

<p>The <b>assignment operator</b>, <code>=</code>, should not be
confused with an equals sign (even though it uses the same character).
Assignment operators link a <em>name</em>, on the left hand side of the
operator, with a <em>value</em>, on the right hand side.  This is why you
will get an error if you enter:</p>

<pre class="python-interpreter">
>>> 17 = n
</pre>

<span class="index" value="state diagram" />

<p>A common way to represent variables on paper is to write the name with
an arrow pointing to the variable's value.  This kind of figure is called a
<b>state diagram</b> because it shows what state each of the
variables is in (think of it as the variable's state of mind).  This diagram
shows the result of the assignment statements:</p>

<img src="illustrations/state2.png" />

<p>The print statement also works with variables.</p>

<pre class="python-interpreter">
>>> print message
What's up, Doc?
>>> print n
17
>>> print pi
3.14159
</pre>

<p>In each case the result is the value of the variable.  Variables also have
types; again, we can ask the interpreter what they are.</p>

<pre class="python-interpreter">
>>> type(message)
&lt;type 'str'>
>>> type(n)
&lt;type 'int'>
>>> type(pi)
&lt;type 'float'>
</pre>

<p>The type of a variable is the type of the value it refers to.</p>


<h2>Variable names and keywords</h2>
<span class="index" value="keyword" />

<p>Programmers generally choose names for their variables that are
meaningful---they document what the variable is used for.</p>

<p>Variable names can be arbitrarily long.  They can contain both letters and
numbers, but they have to begin with a letter.  Although it is legal to use
uppercase letters, by convention we don't.  If you do, remember that case
matters.  <code>Bruce</code> and <code>bruce</code> are different variables.
</p>

<p>The underscore character (<code>_</code>) can appear in a name.  It is often used
in names with multiple words, such as <code>my_name</code> or
<code>price_of_tea_in_china</code>.</p>

<span class="index" value="underscore character" />

<p>If you give a variable an illegal name, you get a syntax error:</p>	

<pre class="python-interpreter">
>>> 76trombones = "big parade"
SyntaxError: invalid syntax
>>> more$ = 1000000
SyntaxError: invalid syntax
>>> class = "Computer Science 101"
SyntaxError: invalid syntax
</pre>

<p><code>76trombones</code> is illegal because it does not begin with a letter.
<code>more$</code> is illegal because it contains an illegal character, the
dollar sign.  But what's wrong with <code>class</code>?</p>

<p>It turns out that <code>class</code> is one of the Python
<b>keywords</b>.  Keywords define the language's rules and structure, 
and they cannot be used as variable names.</p>

<span class="index" value="keyword" />

<p>Python has twenty-nine keywords:</p>

<table class="boxed" style="border-spacing: 40pt 5pt;
                            color: #0000ff;
                            font-weight: bold;">
<tr>
<td>and</td><td>else</td><td>import</td><td>raise</td>
</tr>        
<tr>
<td>assert</td><td>except</td><td>in</td><td>return</td>
</tr>        
<tr>
<td>break</td><td>exec</td><td>is</td><td>try</td>
</tr>        
<tr>
<td>class</td><td>finally</td><td>lambda</td><td>while</td>
</tr>        
<tr>
<td>continue</td><td>for</td><td>not</td><td>yield</td>
</tr>        
<tr>
<td>def</td><td>from</td><td>or</td><td> &nbsp; </td>
</tr>        
<tr>
<td>del</td><td>global</td><td>pass</td><td> &nbsp; </td>
</tr>        
<tr>
<td>elif</td><td>if</td><td>print</td><td> &nbsp; </td>
</tr>        
</table>

<p>You might want to keep this list handy.  If the interpreter complains about
one of your variable names and you don't know why, see if it is on this list.
</p>


<h2>Statements</h2>

<p>A statement is an instruction that the Python interpreter can execute.  We
have seen two kinds of statements: print and assignment.</p>

<p>When you type a statement on the command line, Python executes it and
displays the result, if there is one.  The result of a print statement is a
value.  Assignment statements don't produce a result.</p>

<p>A script usually contains a sequence of statements.  If there is more than
one statement, the results appear one at a time as the statements execute.</p>

<p>For example, the script</p>

<pre class="python">
print 1
x = 2
print x
</pre>

<p>produces the output</p>

<pre class="shell">
1
2
</pre>

<p>Again, the assignment statement produces no output.</p>


<h2>Evaluating expressions</h2>

<p>An expression is a combination of values, variables, and operators.
If you type an expression on the command line, the interpreter
<b>evaluates</b> it and displays the result:</p>

<pre class="python-interpreter">
>>> 1 + 1
2
</pre>

<p>The evaluation of an expression produces a value, which is why expressions
can appear on the right hand side of assignment statements. A value all by
itself is a simple expression, and so is a variable.</p>

<pre class="python-interpreter">
>>> 17
17
>>> x
2
</pre>

<p>Confusingly, evaluating an expression is not quite the same thing as
printing a value.</p>

<pre class="python-interpreter">
>>> message = "What's up, Doc?"
>>> message
"What's up, Doc?"
>>> print message
What's up, Doc?
</pre>

<p>When the Python shell displays the value of an expression, it uses
the same format you would use to enter a value.  In the case of strings, that
means that it includes the quotation marks.  But the print statement prints the 
value of the expression, which in this case is the contents of the string.</p>

<p>In a script, an expression all by itself is a legal statement, but it
doesn't do anything.  The script</p>

<pre class="python">
17
3.2
"Hello, World!"
1 + 1
</pre>

<p>produces no output at all.  How would you change the script to display the
values of these four expressions?</p>


<h2>Operators and operands</h2>
<span class="index" value="operator" />
<span class="index" value="operand" />
<span class="index" value="expression" />

<p><b>Operators</b> are special symbols that represent computations
like addition and multiplication.  The values the operator uses are called
<b>operands</b>.</p>

<p>The following are all legal Python expressions whose meaning is more or
less clear:</p>

<pre>
20+32   hour-1   hour*60+minute   minute/60   5**2   (5+9)*(15-7)
</pre>

<p>The symbols <code>+</code>, <code>-</code>, and <code>/</code>, and the use
of parenthesis for grouping, mean in Python what they mean in mathematics.  The 
asterisk (<code>*</code>) is the symbol for multiplication, and <code>**</code> is the symbol for exponentiation.</p>

<p>When a variable name appears in the place of an operand, it is replaced with 
its value before the operation is performed.</p>

<p>Addition, subtraction, multiplication, and exponentiation all do what you
expect, but you might be surprised by division.  The following operation has an 
unexpected result:</p>

<pre class="python-interpreter">
>>> minute = 59
>>> minute/60
0
</pre>

<p>The value of <code>minute</code> is 59, and 59 divided by 60 is 0.98333,
not 0.  The reason for the discrepancy is that Python is performing
<code>integer division</code>.</p>

<span class="index" value="integer division" />

<p>When both of the operands are integers, the result must also be an integer,
and by convention, integer division always rounds <em>down</em>, even
in cases like this where the next integer is very close.</p>

<p>A possible solution to this problem is to calculate a percentage rather than 
a fraction:</p>

<pre class="python-interpreter">
>>> minute*100/60
98
</pre>

<p>Again the result is rounded down, but at least now the answer is
approximately correct.  Another alternative is to use floating-point division.
We'll see in the next chapter how to convert integer values and variables
to floating-point values.</p>


<h2>Order of operations</h2>
<span class="index" value="order of operations" />
<span class="index" value="rules of precedence" />

<p>When more than one operator appears in an expression, the order of
evaluation depends on the <b>rules of precedence</b>.  Python follows 
the same precedence rules for its mathematical operators that mathematics does.
The acronym <b>PEMDAS</b> is a useful way to remember the order of
operations:</p>

<ol>
<li><b>P</b>arentheses have the highest precedence and can be used 
to force an expression to evaluate in the order you want. Since expressions in
parentheses are evaluated first, <code>2 * (3-1)</code> is 4, and
<code>(1+1)**(5-2)</code> is 8. You can also use parentheses to make an
expression easier to read, as in <code>(minute * 100) / 60</code>, even
though it doesn't change the result.</li>

<li><b>E</b>xponentiation has the next highest precedence, so
<code>2**1+1</code> is 3 and not 4, and <code>3*1**3</code> is 3 and not 27.
</li>

<li><b>M</b>ultiplication and <b>D</b>ivision have the same 
precedence, which is higher than <b>A</b>ddition and
<b>S</b>ubtraction, which also have the same precedence.  So
<code>2*3-1</code> yields 5 rather than 4, and <code>2/3-1</code> is
-1, not 1 (remember that in integer division, 2/3=0).</li>

<li>Operators with the same precedence are evaluated from left to right.  So in 
the expression <code>minute*100/60</code>, the multiplication happens first,
yielding 5900/60, which in turn yields 98.  If the operations had been
evaluated from right to left, the result would have been <code>59*1</code>,
which is 59, which is wrong.</li>
</ol>


<h2>Operations on strings</h2>
<span class="index" value="string operation" />

<p>In general, you cannot perform mathematical operations on strings, even
if the strings look like numbers.  The following are illegal (assuming
that <code>message</code> has type <code>string</code>):</p>

<pre>
message-1   "Hello"/123   message*"Hello"   "15"+2
</pre>

<p>Interestingly, the <code>+</code> operator does work with strings, although
it does not do exactly what you might expect.  For strings, the <code>+</code>
operator represents <b>concatenation</b>, which means joining the two
operands by linking them end-to-end.  For example:</p>

<span class="index" value="concatenation" />

<pre class="python">
fruit = "banana"
baked_good = " nut bread"
print fruit + baked_good
</pre>

<p>The output of this program is <code>banana nut bread</code>.  The space
before the word <code>nut</code> is part of the string, and is necessary
to produce the space between the concatenated strings.</p>

<p>The <code>*</code> operator also works on strings; it performs repetition.
For example, <code>'Fun'*3</code> is <code>'FunFunFun'</code>.  One of the
operands has to be a string; the other has to be an integer.</p>

<p>On one hand, this interpretation of <code>+</code> and <code>*</code> makes
sense by analogy with addition and multiplication.  Just as <code>4*3</code> is
equivalent to <code>4+4+4</code>, we expect <code>"Fun"*3</code> to be the same 
as <code>"Fun"+"Fun"+"Fun"</code>, and it is.  On the other hand, there is a
significant way in which string concatenation and repetition are different from 
integer addition and multiplication.  Can you think of a property that addition 
and multiplication have that string concatenation and repetition do not?</p>


<h2>Input</h2>
<span class="index" value="input" />
<span class="index" value="keyboard input" />
<p>There are two built-in functions in Python for getting keyboard input:</p>

<pre class="python">
n = raw_input("Please enter your name: ")
print n
n = input("Enter a numerical expression: ")
print n
</pre>

<p>A sample run of this script would look something like this:</p>

<pre class="shell">
$ python tryinput.py
Please enter your name: Arthur, King of the Britons
Arthur, King of the Britons
Enter a numerical expression: 7 * 3
21
</pre>

<p>Each of these functions allows a <b>prompt</b> to be
given to the function between the parentheses.</p>

<h2>Composition</h2>
<span class="index" value="composition" />

<p>So far, we have looked at the elements of a program---variables, expressions,
and statements---in isolation, without talking about how to combine them.</p>

<p>One of the most useful features of programming languages is their ability to 
take small building blocks and <b>compose</b> them.  For example, we
know how to add numbers and we know how to print; it turns out we can do both
at the same time:</p>

<pre class="python-interpreter">
>>>  print 17 + 3
20
</pre>

<p>In reality, the addition has to happen before the printing, so the actions
aren't actually happening at the same time. The point is that any expression
involving numbers, strings, and variables can be used inside a print statement. 
You've already seen an example of this:</p>

<pre class="python">
print "Number of minutes since midnight: ", hour*60+minute
</pre>

<p>You can also put arbitrary expressions on the right-hand side of an
assignment statement:</p>

<pre class="python">
percentage = (minute * 100) / 60
</pre>

<p>This ability may not seem impressive now, but you will see other examples
where composition makes it possible to express complex computations neatly and
concisely.</p>

<p>Warning: There are limits on where you can use certain expressions.  For
example, the left-hand side of an assignment statement has to be a
<em>variable</em> name, not an expression.  So, the following is illegal:
<code>minute+1 = hour</code>.</p>


<h2>Comments</h2>
<span class="index" value="comment" />

<p>As programs get bigger and more complicated, they get more difficult to read.
Formal languages are dense, and it is often difficult to look at a piece of code
and figure out what it is doing, or why.</p>

<p>For this reason, it is a good idea to add notes to your programs to explain
in natural language what the program is doing.  These notes are called
<b>comments</b>, and they are marked with the <code>#</code> symbol:
</p>

<pre class="python">
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
</pre>

<p>In this case, the comment appears on a line by itself.  You can also put
comments at the end of a line:</p>

<pre class="python">
percentage = (minute * 100) / 60     # caution: integer division
</pre>

<p>Everything from the <code>#</code> to the end of the line is ignored---it
has no effect on the program.  The message is intended for the programmer or
for future programmers who might use this code.  In this case, it
reminds the reader about the ever-surprising behavior of integer division.</p>


<h2>Glossary</h2>
<span class="index" value="value" />
<span class="index" value="integer" />
<span class="index" value="floating-point" />
<span class="index" value="variable" />
<span class="index" value="type" />
<span class="index" value="keyword" />
<span class="index" value="statement" />
<span class="index" value="assignment" />
<span class="index" value="assignment operator" />
<span class="index" value="operator!assignment" />
<span class="index" value="comment" />
<span class="index" value="state diagram" />
<span class="index" value="expression" />
<span class="index" value="operator" />
<span class="index" value="operand" />
<span class="index" value="integer division" />
<span class="index" value="rules of precedence" />
<span class="index" value="precedence" />
<span class="index" value="concatenation" />
<span class="index" value="composition" />

<dl>
<dt>assignment:</dt>
<dd>A statement that assigns a value to a name (variable). To the left
of the assignment operator, <code>=</code>, is a name. To the right of the
assignment operator is an expression which is evaluated by the Python
interpreter and then assigned to the name.  The difference between the left
and right hand sides of the assignment statement is often confusing to new
programmers.  In the following assignment:
<pre class="python">
n = n + 1
</pre>
<code>n</code> plays a very different role on each side of the <code>=</code>.
On the right it is a <em>value</em> and makes up part of the
<em>expression</em> which will be evaluated by the Python interpreter before
assigning it to the name on the left.
</dd>

<dt>assignment operator:</dt>
<dd><code>=</code> is Python's assignment operator,
which should not be confused with the mathematical comparison operator
using the same symbol.
</dd>

<dt>comment:</dt>
<dd>Information in a program that is meant for other programmers (or anyone
reading the source code) and has no effect on the execution of the program.
</dd>

<dt>composition:</dt>
<dd>The ability to combine simple expressions and statements into compound
statements and expressions in order to represent complex computations
concisely.</dd>

<dt>concatenate:</dt>
<dd>To join two operands end-to-end.</dd>

<dt>evaluate:</dt>
<dd>To simplify an expression by performing the operations in order to yield a
single value.</dd>

<dt>expression:</dt>
<dd>A combination of variables, operators, and values that represents a single
result value.</dd>

<dt>floating-point:</dt>
<dd>A format for representing numbers with fractional parts.</dd>

<dt>integer:</dt>
<dd>A Python data type that holds positive and negative whole numbers.</dd>

<dt>integer division:</dt>
<dd>An operation that divides one integer by another and yields an integer.
Integer division yields only the whole number of times that the numerator is
divisible by the denominator and discards any remainder.</dd>

<dt>keyword:</dt>
<dd>A reserved word that is used by the compiler to parse program; you cannot
use keywords like <code>if</code>, <code>def</code>, and <code>while</code> as
variable names.</dd>

<dt>operand:</dt>
<dd>One of the values on which an operator operates.</dd>

<dt>operator:</dt>
<dd>A special symbol that represents a simple computation like addition,
multiplication, or string concatenation.</dd>

<dt>rules of precedence:</dt>
<dd>The set of rules governing the order in which expressions involving
multiple operators and operands are evaluated.</dd>

<dt>state diagram:</dt>
<dd>A graphical representation of a set of variables and the values to which
they refer.</dd>

<dt>statement:</dt>
<dd>A section of code that represents a command or action.  So far, the
statements you have seen are assignments and print statements.</dd>

<dt>type:</dt>
<dd>A set of values.  The type of a value determines how it can be used in
expressions.  So far, the types you have seen are integers (type
<code>int</code>), floating-point numbers (type <code>float</code>), and
strings (type <code>string</code>).</dd>

<dt>value:</dt>
<dd>A number or string (or other thing to be named later) that can be stored in 
a variable or computed in an expression.</dd>

<dt>variable:</dt>
<dd>A name that refers to a value.</dd>
</dl>


<h2>Exercises</h2>
<ol>
<li><div class="exercise">
Record what happens when you print an assignment statement:
<pre class="python-shell">
>>> print n = 7
</pre>

How about this?
<pre class="python-shell">
>>> print 7 + 5 
</pre>

Or this?
<pre class="python-shell">
>>> print 5.2, "this", 4 - 2, "that", 5/2.0 
</pre>

Can you think a general rule for what can follow the
<code>print</code> statement?  What does the <code>print</code>
statement return?
</div></li>

<li><div class="exercise">
Take the sentence: <em>All work and no play makes Jack a dull boy.</em>
Store each word in a separate variable, then print out the sentence on one
line using print.
</div></li>

<li><div class="exercise">
Add parenthesis to the expression <code>6 * 1 - 2</code> to change its value
from 4 to -6.
</div></li>

<li><div class="exercise">
Place a comment before a line of code that previously worked, and record what
happens when you rerun the program.
</div></li>

<li><div class="exercise">
The difference between <code>input</code> and <code>raw_input</code> is that
<code>input</code> <em>evaluates</em> the input string and
<code>raw_input</code> does not.  Try the following in the interpreter and
record what happens:
<pre class="python-shell">
>>> x = input()
3.14
>>> type(x)
</pre>

<pre class="python-shell">
>>> x = raw_input()
3.14
>>> type(x)
</pre>

<pre class="python-shell">
>>> x = input()
'The knights who say "ni!"'
>>> x
</pre>

What happens if you try the example above without the quotation marks?
<pre class="python-shell">
>>> x = input()
The knights who say "ni!"
>>> x
</pre>

<pre class="python-shell">
>>> x = raw_input()
'The knights who say "ni!"'
>>> x
</pre>
Describe and explain each result.
</div></li>

<li><div class="exercise">
Start the Python interpreter and enter <code>bruce + 4</code> at the prompt.
This will give you an error:
<pre class="python-interpreter">
NameError: name 'bruce' is not defined
</pre>
Assign a value to <code>bruce</code> so that <code>bruce + 4</code> evaluates
to <code>10</code>.
</div></li>
</ol>

</body>
</html>
